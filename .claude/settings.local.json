{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(python:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(tree:*)",
      "Bash(ATTENDANCE_TOOL_WORK_RULES_WORKING_HOURS_STANDARD_DAILY_MINUTES=450 python3 -c \"\nimport sys\nsys.path.append(''src'')\nfrom attendance_tool.utils.config import ConfigManager\n\ntry:\n    config_manager = ConfigManager()\n    work_rules = config_manager.get_work_rules()\n    \n    standard_minutes = work_rules[''working_hours''][''standard_daily_minutes'']\n    print(f''環境変数オーバーライド後の標準労働時間: {standard_minutes}分'')\n    \n    if standard_minutes == 450:\n        print(''✅ 環境変数による設定オーバーライドが正常に動作しています'')\n    else:\n        print(''❌ 環境変数による設定オーバーライドが機能していません'')\n        sys.exit(1)\n        \nexcept Exception as e:\n    print(f''❌ エラー: {e}'')\n    sys.exit(1)\n\")",
      "Bash(ATTENDANCE_TOOL_WORK_RULES_WORKING_HOURS_STANDARD_DAILY_MINUTES=450 python3 -c \"\nimport sys\nsys.path.append(''src'')\nfrom attendance_tool.utils.config import ConfigManager\n\ntry:\n    config_manager = ConfigManager()\n    work_rules = config_manager.get_work_rules()\n    \n    standard_minutes = work_rules[''working_hours''][''standard_daily_minutes'']\n    print(f''環境変数オーバーライド後の標準労働時間: {standard_minutes}分'')\n    \n    if standard_minutes == 450:\n        print(''✅ 環境変数による設定オーバーライドが正常に動作しています'')\n    else:\n        print(''❌ 環境変数による設定オーバーライドが機能していません'')\n        sys.exit(1)\n        \nexcept Exception as e:\n    print(f''❌ エラー: {e}'')\n    sys.exit(1)\n\")",
      "Bash(ATTENDANCE_TOOL_WORK_RULES_WORKING_HOURS_STANDARD_DAILY_MINUTES=450 python3 -c \"\nimport sys\nsys.path.append(''src'')\nimport os\nfrom attendance_tool.utils.config import ConfigManager\n\nprint(''環境変数:'')\nfor key, value in os.environ.items():\n    if key.startswith(''ATTENDANCE_TOOL''):\n        print(f''  {key}={value}'')\n\ntry:\n    config_manager = ConfigManager()\n    print(''\\nconfig_name: work_rules'')\n    env_prefix = f''ATTENDANCE_TOOL_WORK_RULES_''\n    print(f''env_prefix: {env_prefix}'')\n    \n    for env_key, env_value in os.environ.items():\n        if env_key.startswith(env_prefix):\n            print(f''マッチした環境変数: {env_key}={env_value}'')\n            key_path = env_key[len(env_prefix):].lower().split(''_'')\n            print(f''key_path: {key_path}'')\n            \nexcept Exception as e:\n    print(f''❌ エラー: {e}'')\n    sys.exit(1)\n\")",
      "Bash(ATTENDANCE_TOOL_WORK_RULES_WORKING_HOURS_STANDARD_DAILY_MINUTES=450 python3 -c \"\nimport sys\nsys.path.append(''src'')\nfrom attendance_tool.utils.config import ConfigManager\n\ntry:\n    config_manager = ConfigManager()\n    work_rules = config_manager.get_work_rules()\n    \n    standard_minutes = work_rules[''working_hours''][''standard_daily_minutes'']\n    print(f''環境変数オーバーライド後の標準労働時間: {standard_minutes}分'')\n    \n    if standard_minutes == 450:\n        print(''✅ 環境変数による設定オーバーライドが正常に動作しています'')\n    else:\n        print(''❌ 環境変数による設定オーバーライドが機能していません'')\n        \nexcept Exception as e:\n    print(f''❌ エラー: {e}'')\n    sys.exit(1)\n\")",
      "Bash(ATTENDANCE_TOOL_WORK_RULES_WORKING_HOURS_STANDARD_DAILY_MINUTES=450 python3 -c \"\nimport sys\nsys.path.append(''''src'''')\nfrom attendance_tool.utils.config import ConfigManager\n\ntry:\n    config_manager = ConfigManager()\n    work_rules = config_manager.get_work_rules()\n    \n    standard_minutes = work_rules[''''working_hours''''][''''standard_daily_minutes'''']\n    print(f''''\\n最終結果 - 環境変数オーバーライド後の標準労働時間: {standard_minutes}分'''')\n    \n    if standard_minutes == 450:\n        print(''''✅ 環境変数による設定オーバーライドが正常に動作しています'''')\n    else:\n        print(''''❌ 環境変数による設定オーバーライドが機能していません'''')\n        \nexcept Exception as e:\n    print(f''''❌ エラー: {e}'''')\n    sys.exit(1)\n\")",
      "Bash(export ATTENDANCE_TOOL_WORK_RULES_WORKING_HOURS_STANDARD_DAILY_MINUTES=450)",
      "Bash(export:*)",
      "Bash(pip3 install:*)",
      "Bash(apt list:*)",
      "Bash(apt install:*)",
      "Bash(pip install:*)",
      "Bash(claude code tdd-requirements TASK-501)",
      "Bash(claude code tdd-testcases:*)",
      "Bash(claude code tdd-red:*)",
      "Bash(claude code tdd-green:*)",
      "Bash(claude code tdd-refactor TASK-501)",
      "Bash(claude code tdd-verify-complete:*)",
      "Bash(claude code tdd-requirements TASK-502)",
      "Bash(claude code tdd-requirements:*)",
      "Bash(attendance-tool:*)",
      "Bash(dist/attendance-tool-cli.exe:*)",
      "Bash(dir:*)",
      "Bash(distattendance-tool-gui.exe)",
      "Bash(dist/attendance-tool-gui.exe)",
      "Bash(lizard:*)",
      "Bash(echo \"Return code: $?\")",
      "Bash(make:*)",
      "Bash(choco:*)",
      "Bash(winget:*)",
      "Bash(cmd /c make.bat:*)",
      "Bash(powershell:*)",
      "Bash(cmd /c make.cmd:*)",
      "Bash(./make.cmd help)",
      "Bash(./make.cmd complexity)",
      "Bash(./make.cmd complexity-report)",
      "Bash(grep:*)"
    ],
    "deny": []
  }
}